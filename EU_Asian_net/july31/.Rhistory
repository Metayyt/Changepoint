dyadic = read.csv('COW_Trade_4.0/COW_Trade_4.0/Dyadic_COW_4.0.csv', header=TRUE, sep=',')
nation = read.csv('COW_Trade_4.0/COW_Trade_4.0/National_COW_4.0.csv', header=TRUE, sep=',')
ccode = sort(unique(nation$ccode)) # 205
year = sort(unique(dyadic$year)) # 145
country_id1 = c(1:205)[match(dyadic$ccode1, ccode)]
country_id2 = c(1:205)[match(dyadic$ccode2, ccode)]
year_id = c(1:145)[match(dyadic$year, year)]
part1_df = data.frame(V1=country_id1, V2=country_id2, year=year_id, weight=dyadic$flow1)
part2_df = data.frame(V1=country_id2, V2=country_id1, year=year_id, weight=dyadic$flow2)
trade_df = rbind(part1_df, part2_df)
# here, I delete all rows which contains missing trade data and whose trading amounts is 0
trade_df<-trade_df[!(trade_df$weight==-9 | trade_df$weight==0),]
graphs = array(0, dim=c(length(year), length(ccode), length(ccode)))
for (i in 1 : dim(trade_df)[1]){
record = trade_df[i,]
graphs[record[[3]], record[[1]], record[[2]]] = 1
}
# after adding following code, you can draw vertex with country name. I have checked
country = unique(nation$statename)
dimnames(graphs)[[1]] = year
dimnames(graphs)[[2]] = country
dimnames(graphs)[[3]] = country
edget=apply(graphs,1,sum)
csid=c(1:48,51:57,61:67,69:75,77:168,170:205)
X=graphs[81:145,csid,csid]
n=dim(X)[1]
p=dim(X)[2]
time=year[81:145]
#change point
source('C:/work/network/function.R')
q=2
cid=38
n1hat=cid+4
X1=X[1:n1hat,,]
X2=X[(n1hat+1):n,,]
nu1=nu(X1,q)
nu2=nu(X2,q)
k=1
pa1=u1u2(X1,q,k)
pa2=u1u2(X2,q,k)
library(aricode)
ahat=matrix(rep(0,p^2),nrow=p)
bhat=ahat
Xlead=X[2:n,,]
for(j in 1:p){
for(k in j:p){
ahat[j,k]=sum(Xlead[,j,k]*(1-X[1:(n-1),j,k]))/(sum(1-X[1:(n-1),j,k])+.0001)
bhat[j,k]=sum((1-Xlead[,j,k])*X[1:(n-1),j,k])/(sum(X[1:(n-1),j,k])+.0001)
}}
ahat=(ahat+t(ahat))-diag(diag(ahat))
bhat=(bhat+t(bhat))-diag(diag(bhat))
q=2
#cluster
W1=ahat
W2=1-bhat
W1=W1-diag(diag(W1))
W2=W2-diag(diag(W2))
D1=apply(W1,1,sum)
D2=apply(W2,1,sum)
L1=diag(1/sqrt(D1+.0001))%*%W1%*%diag(1/sqrt(D1+.0001))
L2=diag(1/sqrt(D2+.0001))%*%W2%*%diag(1/sqrt(D2+.0001))
ev=eigen(L1+L2)
gamma=ev$vector[,1:q]
km<-kmeans(gamma,centers = q,nstart=20)
nuhat=km$cluster
i=31
i=50
i=1
net <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
V(net)$cluster = nuhat
#V(net)$cluster = as.numeric(as.character(attributes$status))
colrs <- c("tomato", "gold")
V(net)$color <- colrs[V(net)$cluster]
#V(net)$color=as.numeric(V(net)$cluster)+1
layout = gamma
#layout=layout_with_lgl
#layout=layout_on_grid
plot(net, layout=layout, vertex.size=5, vertex.label.cex=1, edge.color='gray')
png("tr2031.png", width=1024, height=768,bg='transparent')
i=31
net <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
V(net)$cluster = nu1
colrs <- c("tomato","gold")
V(net)$color <- colrs[V(net)$cluster]
layout = gamma[,1:2]
plot(net, layout=layout, vertex.size=5, vertex.label.cex=.6, edge.color='black')
dev.off()
png("tr2050.png", width=1024, height=768,bg='transparent')
i=50
net <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
V(net)$cluster = nu2
colrs <- c("tomato","gold")
V(net)$color <- colrs[V(net)$cluster]
layout = gamma[,1:2]
plot(net, layout=layout, vertex.size=5, vertex.label.cex=.6, edge.color='black')
dev.off()
dyadic = read.csv('COW_Trade_4.0/COW_Trade_4.0/Dyadic_COW_4.0.csv', header=TRUE, sep=',')
nation = read.csv('COW_Trade_4.0/COW_Trade_4.0/National_COW_4.0.csv', header=TRUE, sep=',')
ccode = sort(unique(nation$ccode)) # 205
year = sort(unique(dyadic$year)) # 145
country_id1 = c(1:205)[match(dyadic$ccode1, ccode)]
country_id2 = c(1:205)[match(dyadic$ccode2, ccode)]
year_id = c(1:145)[match(dyadic$year, year)]
part1_df = data.frame(V1=country_id1, V2=country_id2, year=year_id, weight=dyadic$flow1)
part2_df = data.frame(V1=country_id2, V2=country_id1, year=year_id, weight=dyadic$flow2)
trade_df = rbind(part1_df, part2_df)
trade_df<-trade_df[!(trade_df$weight==-9 | trade_df$weight==0),]
graphs = array(0, dim=c(length(year), length(ccode), length(ccode)))
for (i in 1 : dim(trade_df)[1]){
record = trade_df[i,]
graphs[record[[3]], record[[1]], record[[2]]] = 1
}
# after adding following code, you can draw vertex with country name. I have checked
country = unique(nation$statename)
dimnames(graphs)[[1]] = year
dimnames(graphs)[[2]] = country
dimnames(graphs)[[3]] = country
edget=apply(graphs,1,sum)
csid=c(1:48,51:57,61:67,69:75,77:168,170:205)
X=graphs[81:145,csid,csid]
n=dim(X)[1]
p=dim(X)[2]
time=year[81:145]
n
p
library(sand)
library(sand)
hist(degree(X[1,,]),col='lightblue')
g1 <- graph_from_adjacency_matrix(X, mode='undirected')
g1 <- graph_from_adjacency_matrix(X[1,,], mode='undirected')
hist(degree(g1),col='lightblue')
coun=country[csid]
d1=degree(g1)
d1
ecount(g1)
vcount(g1)
fm1=formula(g1~edges)
fm1
summary(fm1)
fm1=formula(as.network(g1)~edges)
summary(fm1)
ergm(fm1)
library(ergm)
fm1=formula(g1 ~ edges)
summary(fm1)
fm1=formula(as.network(g1) ~ edges)
summary(fm1)
fm1=formula(as.network(g1,directed='False') ~ edges)
summary(fm1)
A <- as_adjacency_matrix(d1)
v.attrs <- as_data_frame(d1, what="vertices")
A <- as_adjacency_matrix(g1)
v.attrs <- as_data_frame(g1, what="vertices")
g1.s <- network::as.network(as.matrix(A),
directed=FALSE)
fm1=formula(g1.s ~ edges)
summary(fm1)
fm0=ergm(fm1)
my.ergm <- formula(g1.s ~ edges + kstar(2)
+ kstar(3) + triangle)
summary(my.ergm)
fm0=ergm(my.ergm)
summary(fm0)
anova(fm0)
?ergm
my.ergm <- formula(g1.s ~ edges + kstar(2) + triangle)
summary(my.ergm)
fm0=ergm(my.ergm)
summary(my.ergm)
d1
sum(d1)
dn=rep(0,n)
for(i in 1:n)
{
g1 <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
dn[i]=degree(g1)
}
warnings()
dn
n
i
p
dn=rep(0,n*p)
dnn=matrix(dn,nrow=n)
dim(dnn)
for(i in 1:n)
{
g1 <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
dn[i,]=sum(degree(g1))
}
for(i in 1:n)
{
g1 <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
dn[i,]=(degree(g1))
}
aaa=degree(g1)
head(aaa)
for(i in 1:n)
{
g1 <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
dn[i,]=as.vector(degree(g1))
}
length(aaa)
dim(aaa)
?degree
for(i in 1:n)
{
g1 <- graph_from_adjacency_matrix(X[i,,], mode='undirected')
dnn[i,]=(degree(g1))
}
plot(dnn)
plot(1:n,dnn)
plot(1:n,dnn[,1])
year[1]
length(year)
n
p
year[81]
plot(year[80+1:n],dnn[,1])
for(i in 2:p)
{
lines(year[80+1:n],dnn[,i])
}
fm=ar(dnn[,1],order.max=1)
fm
a1=coef(fm)
a1
methods(class='ar')
fm$coef
fm$coeff
str(fm)
a1=fm$ar
a1
a1=rep(0,n)
for(i in 1:n)
{
fm=ar(dnn[,i],order.max=1)
a1[i]=fm$ar
}
i
a1=rep(0,n)
for(i in 1:n)
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar
}
i
dnn[,42]
n
dim(dnn)
fm
i=42
fm=ar(dnn[,i],order.max=1,methods='ols')
a1=rep(0,p)
list1=c(1:41,43:p)
for(i in list1)
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar
}
i
a1=rep(0,p)
list1=c(1:41,44:p)
for(i in list1)
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar
}
i
list1=c(1:41,44:45,47:p)
for(i in list1)
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar
}
i
dnn[,i]
a1=rep(0,p)
for(i in 1:p)
{
if(dnn[,i]==rep(0,n)){a1[i]=-1}
else
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar}
}
warnings
warnings()
a1=rep(0,p)
for(i in 1:p)
{
if(sum(dnn[,i])=0){a1[i]=-1}
else
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar}
}
a1=rep(0,p)
for(i in 1:p)
{
if(sum(dnn[,i])==0){a1[i]=-1}
else
{
fm=ar(dnn[,i],order.max=1,methods='ols')
a1[i]=fm$ar}
}
sum(a1<0)
hist(a1)
table(a1)
table(digits(a1,2)
)
options(digits=4)
table(a1)
table(round(a1,4)
)
table(round(a1,2))
coun[a1<0]

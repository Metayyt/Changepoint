scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
library(tidygraph)
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.1
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
adj_aver_complete
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
# 转换邻接矩阵为图
# 只保留重要的边（过滤低于阈值的值）
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如 degree 或者 pagerank）
V(graph)$size <- strength(graph, mode = "all")  # 或者用 page_rank(graph)$vector * 100
# 转换为 tidygraph 格式（便于 ggraph 使用）
tidy_graph <- as_tbl_graph(graph)
# 绘制网络图
ggraph(tidy_graph, layout = "fr") +  # 力导向布局
geom_edge_link(aes(width = weight), color = "gray") +  # 边宽度映射到权重
geom_node_point(aes(size = size), color = "blue") +    # 节点大小映射重要性
geom_node_text(aes(label = name), repel = TRUE) +      # 添加节点标签
scale_edge_width(range = c(0.1, 0.2)) +                  # 设置边宽范围
scale_size_continuous(range = c(2, 10)) +              # 调整节点大小范围
theme_minimal() +
xlim(-2, 3) +                                          # 限制 x 轴范围
ylim(-2, 3) +
labs(title = "Network Graph", size = "Node Importance", edge_width = "Edge Weight")
install.packages("visNetwork")
library(visNetwork)
library(igraph)
# 设置阈值并清洗邻接矩阵
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如加权度数）
V(graph)$size <- strength(graph, mode = "all")  # 用加权度数作为节点大小
# 准备节点和边的数据框
nodes <- data.frame(
id = 1:vcount(graph),                  # 节点 ID
label = V(graph)$name,                 # 节点标签
value = V(graph)$size,                 # 节点大小（根据加权度数）
group = 1                              # 可选：分组（这里统一为 1）
)
edges <- as_data_frame(graph, what = "edges")  # 提取边数据
edges <- data.frame(
from = edges$from,                          # 起点
to = edges$to,                              # 终点
width = edges$weight                        # 边宽度
)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
library(visNetwork)
library(igraph)
# 设置阈值并清洗邻接矩阵
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如加权度数）
V(graph)$size <- strength(graph, mode = "all")  # 用加权度数作为节点大小
# 准备节点和边的数据框
nodes <- data.frame(
id = 1:vcount(graph),                  # 节点 ID
label = V(graph)$name,                 # 节点标签
value = V(graph)$size,                 # 节点大小（根据加权度数）
group = 1                              # 可选：分组（这里统一为 1）
)
edges <- as_data_frame(graph, what = "edges")  # 提取边数据
edges <- data.frame(
from = edges$from,                          # 起点
to = edges$to,                              # 终点
width = edges$weight                        # 边宽度
)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
library(visNetwork)
library(igraph)
# 设置阈值并清洗邻接矩阵
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如加权度数）
V(graph)$size <- strength(graph, mode = "all")  # 用加权度数作为节点大小
# 准备节点和边的数据框
nodes <- data.frame(
id = 1:vcount(graph),                  # 节点 ID
label = V(graph)$name,                 # 节点标签
value = V(graph)$size,                 # 节点大小（根据加权度数）
group = 1                              # 可选：分组（这里统一为 1）
)
edges <- as_data_frame(graph, what = "edges")  # 提取边数据
edges <- data.frame(
from = edges$from,                          # 起点
to = edges$to,                              # 终点
width = edges$weight                        # 边宽度
)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
library(visNetwork)
library(igraph)
# 设置阈值并清洗邻接矩阵
threshold <- 0.2
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如加权度数）
V(graph)$size <- strength(graph, mode = "all")  # 用加权度数作为节点大小
# 准备节点和边的数据框
nodes <- data.frame(
id = 1:vcount(graph),                  # 节点 ID
label = V(graph)$name,                 # 节点标签
value = V(graph)$size,                 # 节点大小（根据加权度数）
group = 1                              # 可选：分组（这里统一为 1）
)
edges <- as_data_frame(graph, what = "edges")  # 提取边数据
edges <- data.frame(
from = edges$from,                          # 起点
to = edges$to,                              # 终点
width = edges$weight                        # 边宽度
)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
nodes
edges
# 设置阈值并清洗邻接矩阵
threshold <- 0.1
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如加权度数）
V(graph)$size <- strength(graph, mode = "all")  # 用加权度数作为节点大小
# 准备节点和边的数据框
nodes <- data.frame(
id = 1:vcount(graph),                  # 节点 ID
label = V(graph)$name,                 # 节点标签
value = V(graph)$size,                 # 节点大小（根据加权度数）
group = 1                              # 可选：分组（这里统一为 1）
)
edges <- as_data_frame(graph, what = "edges")  # 提取边数据
edges <- data.frame(
from = edges$from,                          # 起点
to = edges$to,                              # 终点
width = edges$weight                        # 边宽度
)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
# 设置阈值并清洗邻接矩阵
threshold <- 0.1
adj_matrix <- adj_aver_complete
adj_matrix[adj_matrix < threshold] <- 0
# 找到行列全为 0 的索引
non_zero_indices <- rowSums(adj_matrix) > 0 | colSums(adj_matrix) > 0
adj_matrix <- adj_matrix[non_zero_indices, non_zero_indices]
# 创建图对象
graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
# 计算节点的重要性（如加权度数）
V(graph)$size <- strength(graph, mode = "all")  # 用加权度数作为节点大小
# 准备节点和边的数据框
nodes <- data.frame(
id = 1:vcount(graph),                  # 节点 ID
label = V(graph)$name,                 # 节点标签
value = V(graph)$size,                 # 节点大小（根据加权度数）
group = 1                              # 可选：分组（这里统一为 1）
)
edges <- as_data_frame(graph, what = "edges")  # 提取边数据
edges <- data.frame(
from = edges$from,                          # 起点
to = edges$to,                              # 终点
width = edges$weight                        # 边宽度
)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
print(nodes$id)
print(edges$from)
print(edges$to)
# 绘制交互式网络图
visNetwork(nodes, edges) %>%
visNodes(size = nodes$value, color = list(background = "blue", border = "black")) %>%  # 设置节点样式
visEdges(width = edges$width, color = "gray") %>%                                    # 设置边样式
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%                     # 添加交互功能
visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%               # 允许拖动和缩放
visLayout(randomSeed = 42)                                                          # 固定布局
